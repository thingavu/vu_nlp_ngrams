import numpy as np
from generate import GENERATE
from math import log


vocab = open("brown_vocab_100.txt")

#load the indices dictionary
word_index_dict = {}
for i, line in enumerate(vocab):
    #TODO: import part 1 code to build dictionary
    line = line.rstrip('\n')
    word_index_dict[line] = i

f = open("brown_100.txt")

counts = np.zeros(len(word_index_dict))

for line in f:
    sentence = line.rstrip('\n').split()
    for word in sentence:
        if word.lower() in word_index_dict:
            counts[word_index_dict[word.lower()]] += 1

print(counts)   

from sklearn.preprocessing import normalize
import codecs

vocab = codecs.open("brown_vocab_100.txt")

#load the indices dictionary
word_index_dict = {}
for i, line in enumerate(vocab):
    #TODO: import part 1 code to build dictionary
    word_index_dict[line.rstrip()] = i

vocab.close()

#TODO: initialize numpy 0s array
con_counts = np.zeros((len(word_index_dict), len(word_index_dict)))

#TODO: iterate through file and update counts
for line in f:
    words = line.rstrip().split()
    previous_word = '<s>'  # start symbol
    for word in words[1:]:
        if word.lower() in word_index_dict and previous_word.lower() in word_index_dict:
            con_counts[word_index_dict[previous_word.lower()], word_index_dict[word.lower()]] += 1
        previous_word = word

print("con_counts: ")
print(con_counts[0])

# Calculate PMI for all word pairs
pmi_values = []
for i in range(len(word_index_dict)):
    for j in range(len(word_index_dict)):
        if counts[i] >= 10 and counts[j] >= 10:
            if con_counts[i, j] != 0:
                pmi = log((con_counts[i, j] * len(word_index_dict)) / (counts[i] * counts[j]))
                print("11111111111")
            else:
                # print(con_counts[i, j], len(word_index_dict), (counts[i] * counts[j]))
                # print((con_counts[i, j] * len(word_index_dict)) / (counts[i] * counts[j]))
                pmi = 0
            pmi_values.append((pmi, i, j))

# Sort the PMI values in descending order
pmi_values.sort(reverse=True)

# Get the top 20 word pairs with highest PMI
top_20 = pmi_values[:20]

# Get the bottom 20 word pairs with lowest PMI
bottom_20 = pmi_values[-20:]

# Print the top 20 word pairs with highest PMI
print("Top 20 word pairs with highest PMI:")
for pmi, i, j in top_20:
    word1 = list(word_index_dict.keys())[i]
    word2 = list(word_index_dict.keys())[j]
    print(f"{word1}, {word2}: {pmi}")

# Print the bottom 20 word pairs with lowest PMI
print("Bottom 20 word pairs with lowest PMI:")
for pmi, i, j in bottom_20:
    word1 = list(word_index_dict.keys())[i]
    word2 = list(word_index_dict.keys())[j]
    print(f"{word1}, {word2}: {pmi}")


f.close()

print(len(word_index_dict))
